/*
 * This file is generated by jOOQ.
 */
package com.code.smither.generated;


import com.code.smither.generated.tables.Client;
import com.code.smither.generated.tables.Company;
import com.code.smither.generated.tables.Department;
import com.code.smither.generated.tables.Dictionary;
import com.code.smither.generated.tables.Message;
import com.code.smither.generated.tables.Order;
import com.code.smither.generated.tables.Permit;
import com.code.smither.generated.tables.Role;
import com.code.smither.generated.tables.RolePermit;
import com.code.smither.generated.tables.UploadFile;
import com.code.smither.generated.tables.User;
import com.code.smither.generated.tables.UserRole;
import com.code.smither.generated.tables.records.ClientRecord;
import com.code.smither.generated.tables.records.CompanyRecord;
import com.code.smither.generated.tables.records.DepartmentRecord;
import com.code.smither.generated.tables.records.DictionaryRecord;
import com.code.smither.generated.tables.records.MessageRecord;
import com.code.smither.generated.tables.records.OrderRecord;
import com.code.smither.generated.tables.records.PermitRecord;
import com.code.smither.generated.tables.records.RolePermitRecord;
import com.code.smither.generated.tables.records.RoleRecord;
import com.code.smither.generated.tables.records.UploadFileRecord;
import com.code.smither.generated.tables.records.UserRecord;
import com.code.smither.generated.tables.records.UserRoleRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in 
 * traveler.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<ClientRecord> KEY_CLIENT_PRIMARY = Internal.createUniqueKey(Client.CLIENT, DSL.name("KEY_client_PRIMARY"), new TableField[] { Client.CLIENT.ID }, true);
    public static final UniqueKey<CompanyRecord> KEY_COMPANY_PRIMARY = Internal.createUniqueKey(Company.COMPANY, DSL.name("KEY_company_PRIMARY"), new TableField[] { Company.COMPANY.ID }, true);
    public static final UniqueKey<DepartmentRecord> KEY_DEPARTMENT_PRIMARY = Internal.createUniqueKey(Department.DEPARTMENT, DSL.name("KEY_department_PRIMARY"), new TableField[] { Department.DEPARTMENT.ID }, true);
    public static final UniqueKey<DictionaryRecord> KEY_DICTIONARY_DICTIONARY_PK_TYPE_NAME = Internal.createUniqueKey(Dictionary.DICTIONARY, DSL.name("KEY_dictionary_dictionary_pk_type_name"), new TableField[] { Dictionary.DICTIONARY.COMPANY_ID, Dictionary.DICTIONARY.PATH, Dictionary.DICTIONARY.NAME }, true);
    public static final UniqueKey<DictionaryRecord> KEY_DICTIONARY_PRIMARY = Internal.createUniqueKey(Dictionary.DICTIONARY, DSL.name("KEY_dictionary_PRIMARY"), new TableField[] { Dictionary.DICTIONARY.ID }, true);
    public static final UniqueKey<MessageRecord> KEY_MESSAGE_PRIMARY = Internal.createUniqueKey(Message.MESSAGE, DSL.name("KEY_message_PRIMARY"), new TableField[] { Message.MESSAGE.ID }, true);
    public static final UniqueKey<OrderRecord> KEY_ORDER_PRIMARY = Internal.createUniqueKey(Order.ORDER, DSL.name("KEY_order_PRIMARY"), new TableField[] { Order.ORDER.ID }, true);
    public static final UniqueKey<PermitRecord> KEY_PERMIT_PRIMARY = Internal.createUniqueKey(Permit.PERMIT, DSL.name("KEY_permit_PRIMARY"), new TableField[] { Permit.PERMIT.ID }, true);
    public static final UniqueKey<RoleRecord> KEY_ROLE_PRIMARY = Internal.createUniqueKey(Role.ROLE, DSL.name("KEY_role_PRIMARY"), new TableField[] { Role.ROLE.ID }, true);
    public static final UniqueKey<RolePermitRecord> KEY_ROLE_PERMIT_PRIMARY = Internal.createUniqueKey(RolePermit.ROLE_PERMIT, DSL.name("KEY_role_permit_PRIMARY"), new TableField[] { RolePermit.ROLE_PERMIT.ID }, true);
    public static final UniqueKey<UploadFileRecord> KEY_UPLOAD_FILE_PRIMARY = Internal.createUniqueKey(UploadFile.UPLOAD_FILE, DSL.name("KEY_upload_file_PRIMARY"), new TableField[] { UploadFile.UPLOAD_FILE.ID }, true);
    public static final UniqueKey<UserRecord> KEY_USER_PRIMARY = Internal.createUniqueKey(User.USER, DSL.name("KEY_user_PRIMARY"), new TableField[] { User.USER.ID }, true);
    public static final UniqueKey<UserRecord> KEY_USER_USER_PK_ACCOUNT = Internal.createUniqueKey(User.USER, DSL.name("KEY_user_user_pk_account"), new TableField[] { User.USER.COMPANY_ID, User.USER.ACCOUNT }, true);
    public static final UniqueKey<UserRecord> KEY_USER_USER_PK_CODE = Internal.createUniqueKey(User.USER, DSL.name("KEY_user_user_pk_code"), new TableField[] { User.USER.COMPANY_ID, User.USER.CODE }, true);
    public static final UniqueKey<UserRoleRecord> KEY_USER_ROLE_PRIMARY = Internal.createUniqueKey(UserRole.USER_ROLE, DSL.name("KEY_user_role_PRIMARY"), new TableField[] { UserRole.USER_ROLE.ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<ClientRecord, CompanyRecord> CLIENT_COMPANY_ID_FK = Internal.createForeignKey(Client.CLIENT, DSL.name("client_company_id_fk"), new TableField[] { Client.CLIENT.COMPANY_ID }, Keys.KEY_COMPANY_PRIMARY, new TableField[] { Company.COMPANY.ID }, true);
    public static final ForeignKey<DepartmentRecord, CompanyRecord> DEPARTMENT_COMPANY_ID_FK = Internal.createForeignKey(Department.DEPARTMENT, DSL.name("department_company_id_fk"), new TableField[] { Department.DEPARTMENT.COMPANY_ID }, Keys.KEY_COMPANY_PRIMARY, new TableField[] { Company.COMPANY.ID }, true);
    public static final ForeignKey<DepartmentRecord, DepartmentRecord> DEPARTMENT_DEPARTMENT_ID_FK = Internal.createForeignKey(Department.DEPARTMENT, DSL.name("department_department_id_fk"), new TableField[] { Department.DEPARTMENT.PARENT_ID }, Keys.KEY_DEPARTMENT_PRIMARY, new TableField[] { Department.DEPARTMENT.ID }, true);
    public static final ForeignKey<DictionaryRecord, CompanyRecord> DICTIONARY_COMPANY_ID_FK = Internal.createForeignKey(Dictionary.DICTIONARY, DSL.name("dictionary_company_id_fk"), new TableField[] { Dictionary.DICTIONARY.COMPANY_ID }, Keys.KEY_COMPANY_PRIMARY, new TableField[] { Company.COMPANY.ID }, true);
    public static final ForeignKey<MessageRecord, UserRecord> MESSAGE_USER_ID_FK = Internal.createForeignKey(Message.MESSAGE, DSL.name("message_user_id_fk"), new TableField[] { Message.MESSAGE.USER_ID }, Keys.KEY_USER_PRIMARY, new TableField[] { User.USER.ID }, true);
    public static final ForeignKey<OrderRecord, CompanyRecord> ORDER_COMPANY_ID_FK = Internal.createForeignKey(Order.ORDER, DSL.name("order_company_id_fk"), new TableField[] { Order.ORDER.COMPANY_ID }, Keys.KEY_COMPANY_PRIMARY, new TableField[] { Company.COMPANY.ID }, true);
    public static final ForeignKey<RoleRecord, CompanyRecord> ROLE_COMPANY_ID_FK = Internal.createForeignKey(Role.ROLE, DSL.name("role_company_id_fk"), new TableField[] { Role.ROLE.COMPANY_ID }, Keys.KEY_COMPANY_PRIMARY, new TableField[] { Company.COMPANY.ID }, true);
    public static final ForeignKey<RolePermitRecord, PermitRecord> ROLE_PERMIT_PERMIT_ID_FK = Internal.createForeignKey(RolePermit.ROLE_PERMIT, DSL.name("role_permit_permit_id_fk"), new TableField[] { RolePermit.ROLE_PERMIT.PERMIT_ID }, Keys.KEY_PERMIT_PRIMARY, new TableField[] { Permit.PERMIT.ID }, true);
    public static final ForeignKey<RolePermitRecord, RoleRecord> ROLE_PERMIT_ROLE_ID_FK = Internal.createForeignKey(RolePermit.ROLE_PERMIT, DSL.name("role_permit_role_id_fk"), new TableField[] { RolePermit.ROLE_PERMIT.ROLE_ID }, Keys.KEY_ROLE_PRIMARY, new TableField[] { Role.ROLE.ID }, true);
    public static final ForeignKey<UserRecord, CompanyRecord> USER_COMPANY_ID_FK = Internal.createForeignKey(User.USER, DSL.name("user_company_id_fk"), new TableField[] { User.USER.COMPANY_ID }, Keys.KEY_COMPANY_PRIMARY, new TableField[] { Company.COMPANY.ID }, true);
    public static final ForeignKey<UserRecord, DepartmentRecord> USER_DEPARTMENT_ID_FK = Internal.createForeignKey(User.USER, DSL.name("user_department_id_fk"), new TableField[] { User.USER.DEPT_ID }, Keys.KEY_DEPARTMENT_PRIMARY, new TableField[] { Department.DEPARTMENT.ID }, true);
    public static final ForeignKey<UserRoleRecord, RoleRecord> USER_ROLE_ROLE_ID_FK = Internal.createForeignKey(UserRole.USER_ROLE, DSL.name("user_role_role_id_fk"), new TableField[] { UserRole.USER_ROLE.ROLE_ID }, Keys.KEY_ROLE_PRIMARY, new TableField[] { Role.ROLE.ID }, true);
    public static final ForeignKey<UserRoleRecord, UserRecord> USER_ROLE_USER_ID_FK = Internal.createForeignKey(UserRole.USER_ROLE, DSL.name("user_role_user_id_fk"), new TableField[] { UserRole.USER_ROLE.USER_ID }, Keys.KEY_USER_PRIMARY, new TableField[] { User.USER.ID }, true);
}
