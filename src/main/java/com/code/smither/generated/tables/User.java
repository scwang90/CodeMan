/*
 * This file is generated by jOOQ.
 */
package com.code.smither.generated.tables;


import com.code.smither.generated.Keys;
import com.code.smither.generated.Traveler;
import com.code.smither.generated.tables.records.UserRecord;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row17;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * 用户
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class User extends TableImpl<UserRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>traveler.user</code>
     */
    public static final User USER = new User();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserRecord> getRecordType() {
        return UserRecord.class;
    }

    /**
     * The column <code>traveler.user.id</code>. 主键标识
     */
    public final TableField<UserRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "主键标识");

    /**
     * The column <code>traveler.user.dept_id</code>. 部门Id
     */
    public final TableField<UserRecord, Integer> DEPT_ID = createField(DSL.name("dept_id"), SQLDataType.INTEGER, this, "部门Id");

    /**
     * The column <code>traveler.user.company_id</code>. 公司ID
     */
    public final TableField<UserRecord, Integer> COMPANY_ID = createField(DSL.name("company_id"), SQLDataType.INTEGER, this, "公司ID");

    /**
     * The column <code>traveler.user.code</code>. 编号
     */
    public final TableField<UserRecord, String> CODE = createField(DSL.name("code"), SQLDataType.VARCHAR(16).nullable(false), this, "编号");

    /**
     * The column <code>traveler.user.account</code>. 登录账户
     */
    public final TableField<UserRecord, String> ACCOUNT = createField(DSL.name("account"), SQLDataType.VARCHAR(32).nullable(false), this, "登录账户");

    /**
     * The column <code>traveler.user.password</code>. 登录密码
     */
    public final TableField<UserRecord, String> PASSWORD = createField(DSL.name("password"), SQLDataType.VARCHAR(32).nullable(false), this, "登录密码");

    /**
     * The column <code>traveler.user.name</code>. 姓名
     */
    public final TableField<UserRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(32).nullable(false), this, "姓名");

    /**
     * The column <code>traveler.user.avatar</code>. 头像
     */
    public final TableField<UserRecord, String> AVATAR = createField(DSL.name("avatar"), SQLDataType.VARCHAR(256), this, "头像");

    /**
     * The column <code>traveler.user.gender</code>. 性别（0：未设置 1：男 2：女）
     */
    public final TableField<UserRecord, Byte> GENDER = createField(DSL.name("gender"), SQLDataType.TINYINT.defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "性别（0：未设置 1：男 2：女）");

    /**
     * The column <code>traveler.user.birthday</code>. 生日
     */
    public final TableField<UserRecord, LocalDate> BIRTHDAY = createField(DSL.name("birthday"), SQLDataType.LOCALDATE, this, "生日");

    /**
     * The column <code>traveler.user.address</code>. 地址
     */
    public final TableField<UserRecord, String> ADDRESS = createField(DSL.name("address"), SQLDataType.VARCHAR(64).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "地址");

    /**
     * The column <code>traveler.user.phone</code>. 电话
     */
    public final TableField<UserRecord, String> PHONE = createField(DSL.name("phone"), SQLDataType.CHAR(11).defaultValue(DSL.inline("", SQLDataType.CHAR)), this, "电话");

    /**
     * The column <code>traveler.user.type</code>. 类别（使用字典配置：正式员工/非正式员工）
     */
    public final TableField<UserRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR(32).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "类别（使用字典配置：正式员工/非正式员工）");

    /**
     * The column <code>traveler.user.identiy</code>. 身份证
     */
    public final TableField<UserRecord, String> IDENTIY = createField(DSL.name("identiy"), SQLDataType.CHAR(18).defaultValue(DSL.inline("", SQLDataType.CHAR)), this, "身份证");

    /**
     * The column <code>traveler.user.entry_date</code>. 入职时间
     */
    public final TableField<UserRecord, LocalDate> ENTRY_DATE = createField(DSL.name("entry_date"), SQLDataType.LOCALDATE, this, "入职时间");

    /**
     * The column <code>traveler.user.update_time</code>. 更新时间
     */
    public final TableField<UserRecord, LocalDateTime> UPDATE_TIME = createField(DSL.name("update_time"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "更新时间");

    /**
     * The column <code>traveler.user.create_time</code>. 创建时间
     */
    public final TableField<UserRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "创建时间");

    private User(Name alias, Table<UserRecord> aliased) {
        this(alias, aliased, null);
    }

    private User(Name alias, Table<UserRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("用户"), TableOptions.table());
    }

    /**
     * Create an aliased <code>traveler.user</code> table reference
     */
    public User(String alias) {
        this(DSL.name(alias), USER);
    }

    /**
     * Create an aliased <code>traveler.user</code> table reference
     */
    public User(Name alias) {
        this(alias, USER);
    }

    /**
     * Create a <code>traveler.user</code> table reference
     */
    public User() {
        this(DSL.name("user"), null);
    }

    public <O extends Record> User(Table<O> child, ForeignKey<O, UserRecord> key) {
        super(child, key, USER);
    }

    @Override
    public Schema getSchema() {
        return Traveler.TRAVELER;
    }

    @Override
    public Identity<UserRecord, Integer> getIdentity() {
        return (Identity<UserRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<UserRecord> getPrimaryKey() {
        return Keys.KEY_USER_PRIMARY;
    }

    @Override
    public List<UniqueKey<UserRecord>> getKeys() {
        return Arrays.<UniqueKey<UserRecord>>asList(Keys.KEY_USER_PRIMARY, Keys.KEY_USER_USER_PK_ACCOUNT, Keys.KEY_USER_USER_PK_CODE);
    }

    @Override
    public List<ForeignKey<UserRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<UserRecord, ?>>asList(Keys.USER_DEPARTMENT_ID_FK, Keys.USER_COMPANY_ID_FK);
    }

    private transient Department _department;
    private transient Company _company;

    public Department department() {
        if (_department == null)
            _department = new Department(this, Keys.USER_DEPARTMENT_ID_FK);

        return _department;
    }

    public Company company() {
        if (_company == null)
            _company = new Company(this, Keys.USER_COMPANY_ID_FK);

        return _company;
    }

    @Override
    public User as(String alias) {
        return new User(DSL.name(alias), this);
    }

    @Override
    public User as(Name alias) {
        return new User(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public User rename(String name) {
        return new User(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public User rename(Name name) {
        return new User(name, null);
    }

    // -------------------------------------------------------------------------
    // Row17 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row17<Integer, Integer, Integer, String, String, String, String, String, Byte, LocalDate, String, String, String, String, LocalDate, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row17) super.fieldsRow();
    }
}
