/*
 * This file is generated by jOOQ.
 */
package com.code.smither.generated.tables;


import com.code.smither.generated.Keys;
import com.code.smither.generated.Traveler;
import com.code.smither.generated.tables.records.DictionaryRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * 字典
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Dictionary extends TableImpl<DictionaryRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>traveler.dictionary</code>
     */
    public static final Dictionary DICTIONARY = new Dictionary();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DictionaryRecord> getRecordType() {
        return DictionaryRecord.class;
    }

    /**
     * The column <code>traveler.dictionary.id</code>. 主键标识
     */
    public final TableField<DictionaryRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "主键标识");

    /**
     * The column <code>traveler.dictionary.company_id</code>. 公司ID
     */
    public final TableField<DictionaryRecord, Integer> COMPANY_ID = createField(DSL.name("company_id"), SQLDataType.INTEGER.nullable(false), this, "公司ID");

    /**
     * The column <code>traveler.dictionary.path</code>. 路径
     */
    public final TableField<DictionaryRecord, String> PATH = createField(DSL.name("path"), SQLDataType.VARCHAR(32), this, "路径");

    /**
     * The column <code>traveler.dictionary.name</code>. 名称
     */
    public final TableField<DictionaryRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(32).nullable(false), this, "名称");

    /**
     * The column <code>traveler.dictionary.value</code>. 值
     */
    public final TableField<DictionaryRecord, String> VALUE = createField(DSL.name("value"), SQLDataType.VARCHAR(32).nullable(false), this, "值");

    /**
     * The column <code>traveler.dictionary.update_time</code>. 更新时间
     */
    public final TableField<DictionaryRecord, LocalDateTime> UPDATE_TIME = createField(DSL.name("update_time"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "更新时间");

    /**
     * The column <code>traveler.dictionary.create_time</code>. 创建时间
     */
    public final TableField<DictionaryRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "创建时间");

    private Dictionary(Name alias, Table<DictionaryRecord> aliased) {
        this(alias, aliased, null);
    }

    private Dictionary(Name alias, Table<DictionaryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("字典"), TableOptions.table());
    }

    /**
     * Create an aliased <code>traveler.dictionary</code> table reference
     */
    public Dictionary(String alias) {
        this(DSL.name(alias), DICTIONARY);
    }

    /**
     * Create an aliased <code>traveler.dictionary</code> table reference
     */
    public Dictionary(Name alias) {
        this(alias, DICTIONARY);
    }

    /**
     * Create a <code>traveler.dictionary</code> table reference
     */
    public Dictionary() {
        this(DSL.name("dictionary"), null);
    }

    public <O extends Record> Dictionary(Table<O> child, ForeignKey<O, DictionaryRecord> key) {
        super(child, key, DICTIONARY);
    }

    @Override
    public Schema getSchema() {
        return Traveler.TRAVELER;
    }

    @Override
    public Identity<DictionaryRecord, Integer> getIdentity() {
        return (Identity<DictionaryRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<DictionaryRecord> getPrimaryKey() {
        return Keys.KEY_DICTIONARY_PRIMARY;
    }

    @Override
    public List<UniqueKey<DictionaryRecord>> getKeys() {
        return Arrays.<UniqueKey<DictionaryRecord>>asList(Keys.KEY_DICTIONARY_PRIMARY, Keys.KEY_DICTIONARY_DICTIONARY_PK_TYPE_NAME);
    }

    @Override
    public List<ForeignKey<DictionaryRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<DictionaryRecord, ?>>asList(Keys.DICTIONARY_COMPANY_ID_FK);
    }

    private transient Company _company;

    public Company company() {
        if (_company == null)
            _company = new Company(this, Keys.DICTIONARY_COMPANY_ID_FK);

        return _company;
    }

    @Override
    public Dictionary as(String alias) {
        return new Dictionary(DSL.name(alias), this);
    }

    @Override
    public Dictionary as(Name alias) {
        return new Dictionary(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Dictionary rename(String name) {
        return new Dictionary(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Dictionary rename(Name name) {
        return new Dictionary(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, Integer, String, String, String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
