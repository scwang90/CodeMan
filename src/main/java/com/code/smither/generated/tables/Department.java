/*
 * This file is generated by jOOQ.
 */
package com.code.smither.generated.tables;


import com.code.smither.generated.Keys;
import com.code.smither.generated.Traveler;
import com.code.smither.generated.tables.records.DepartmentRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * 部门
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Department extends TableImpl<DepartmentRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>traveler.department</code>
     */
    public static final Department DEPARTMENT = new Department();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DepartmentRecord> getRecordType() {
        return DepartmentRecord.class;
    }

    /**
     * The column <code>traveler.department.id</code>. 主键标识
     */
    public final TableField<DepartmentRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "主键标识");

    /**
     * The column <code>traveler.department.parent_id</code>. 上级ID
     */
    public final TableField<DepartmentRecord, Integer> PARENT_ID = createField(DSL.name("parent_id"), SQLDataType.INTEGER, this, "上级ID");

    /**
     * The column <code>traveler.department.company_id</code>. 公司ID
     */
    public final TableField<DepartmentRecord, Integer> COMPANY_ID = createField(DSL.name("company_id"), SQLDataType.INTEGER.nullable(false), this, "公司ID");

    /**
     * The column <code>traveler.department.code</code>. 编号
     */
    public final TableField<DepartmentRecord, String> CODE = createField(DSL.name("code"), SQLDataType.VARCHAR(16).nullable(false), this, "编号");

    /**
     * The column <code>traveler.department.name</code>. 名称
     */
    public final TableField<DepartmentRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(32).nullable(false), this, "名称");

    /**
     * The column <code>traveler.department.update_time</code>. 更新时间
     */
    public final TableField<DepartmentRecord, LocalDateTime> UPDATE_TIME = createField(DSL.name("update_time"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "更新时间");

    /**
     * The column <code>traveler.department.create_time</code>. 创建时间
     */
    public final TableField<DepartmentRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "创建时间");

    private Department(Name alias, Table<DepartmentRecord> aliased) {
        this(alias, aliased, null);
    }

    private Department(Name alias, Table<DepartmentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("部门"), TableOptions.table());
    }

    /**
     * Create an aliased <code>traveler.department</code> table reference
     */
    public Department(String alias) {
        this(DSL.name(alias), DEPARTMENT);
    }

    /**
     * Create an aliased <code>traveler.department</code> table reference
     */
    public Department(Name alias) {
        this(alias, DEPARTMENT);
    }

    /**
     * Create a <code>traveler.department</code> table reference
     */
    public Department() {
        this(DSL.name("department"), null);
    }

    public <O extends Record> Department(Table<O> child, ForeignKey<O, DepartmentRecord> key) {
        super(child, key, DEPARTMENT);
    }

    @Override
    public Schema getSchema() {
        return Traveler.TRAVELER;
    }

    @Override
    public Identity<DepartmentRecord, Integer> getIdentity() {
        return (Identity<DepartmentRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<DepartmentRecord> getPrimaryKey() {
        return Keys.KEY_DEPARTMENT_PRIMARY;
    }

    @Override
    public List<UniqueKey<DepartmentRecord>> getKeys() {
        return Arrays.<UniqueKey<DepartmentRecord>>asList(Keys.KEY_DEPARTMENT_PRIMARY);
    }

    @Override
    public List<ForeignKey<DepartmentRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<DepartmentRecord, ?>>asList(Keys.DEPARTMENT_DEPARTMENT_ID_FK, Keys.DEPARTMENT_COMPANY_ID_FK);
    }

    private transient Department _department;
    private transient Company _company;

    public Department department() {
        if (_department == null)
            _department = new Department(this, Keys.DEPARTMENT_DEPARTMENT_ID_FK);

        return _department;
    }

    public Company company() {
        if (_company == null)
            _company = new Company(this, Keys.DEPARTMENT_COMPANY_ID_FK);

        return _company;
    }

    @Override
    public Department as(String alias) {
        return new Department(DSL.name(alias), this);
    }

    @Override
    public Department as(Name alias) {
        return new Department(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Department rename(String name) {
        return new Department(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Department rename(Name name) {
        return new Department(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, Integer, Integer, String, String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
