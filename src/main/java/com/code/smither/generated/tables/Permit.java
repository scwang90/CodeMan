/*
 * This file is generated by jOOQ.
 */
package com.code.smither.generated.tables;


import com.code.smither.generated.Keys;
import com.code.smither.generated.Traveler;
import com.code.smither.generated.tables.records.PermitRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * 权限
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Permit extends TableImpl<PermitRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>traveler.permit</code>
     */
    public static final Permit PERMIT = new Permit();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PermitRecord> getRecordType() {
        return PermitRecord.class;
    }

    /**
     * The column <code>traveler.permit.id</code>. 主键标识
     */
    public final TableField<PermitRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "主键标识");

    /**
     * The column <code>traveler.permit.name</code>. 名称
     */
    public final TableField<PermitRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(32).nullable(false), this, "名称");

    /**
     * The column <code>traveler.permit.module</code>. 模块
     */
    public final TableField<PermitRecord, String> MODULE = createField(DSL.name("module"), SQLDataType.VARCHAR(32).nullable(false), this, "模块");

    /**
     * The column <code>traveler.permit.remark</code>. 备注说明
     */
    public final TableField<PermitRecord, String> REMARK = createField(DSL.name("remark"), SQLDataType.VARCHAR(64).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "备注说明");

    private Permit(Name alias, Table<PermitRecord> aliased) {
        this(alias, aliased, null);
    }

    private Permit(Name alias, Table<PermitRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("权限"), TableOptions.table());
    }

    /**
     * Create an aliased <code>traveler.permit</code> table reference
     */
    public Permit(String alias) {
        this(DSL.name(alias), PERMIT);
    }

    /**
     * Create an aliased <code>traveler.permit</code> table reference
     */
    public Permit(Name alias) {
        this(alias, PERMIT);
    }

    /**
     * Create a <code>traveler.permit</code> table reference
     */
    public Permit() {
        this(DSL.name("permit"), null);
    }

    public <O extends Record> Permit(Table<O> child, ForeignKey<O, PermitRecord> key) {
        super(child, key, PERMIT);
    }

    @Override
    public Schema getSchema() {
        return Traveler.TRAVELER;
    }

    @Override
    public Identity<PermitRecord, Integer> getIdentity() {
        return (Identity<PermitRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<PermitRecord> getPrimaryKey() {
        return Keys.KEY_PERMIT_PRIMARY;
    }

    @Override
    public List<UniqueKey<PermitRecord>> getKeys() {
        return Arrays.<UniqueKey<PermitRecord>>asList(Keys.KEY_PERMIT_PRIMARY);
    }

    @Override
    public Permit as(String alias) {
        return new Permit(DSL.name(alias), this);
    }

    @Override
    public Permit as(Name alias) {
        return new Permit(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Permit rename(String name) {
        return new Permit(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Permit rename(Name name) {
        return new Permit(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
