/*  This class is generated by CodeMan */package ${packageName}.mapper.intent.impl;import java.util.ArrayList;import java.util.Arrays;import java.util.List;public class Condition<T> {    private String op;    private String column;    private Object value;    private List<Condition<T>> conditions;    private int level = 0;    public Condition(String column, String op, Object value) {        this.op = op;        this.column = column;        this.value = value;    }    public Condition(Condition<T> left, String op, Condition<T> right) {        this.op = op;        this.level = Math.max(left.level, right.level) + 1;        this.conditions = new ArrayList<>(Arrays.asList(left, right));        this.checkLevel();    }    public boolean isMultCondition() {        return conditions != null;    }    public Condition<T> or(Condition<T> condition) {        return merge(this, "OR", condition);    }    public Condition<T> and(Condition<T> condition) {        return merge(this, "AND", condition);    }    private static <T> Condition<T> merge(Condition<T> left, String op, Condition<T> right) {        if (left.isMultCondition() != right.isMultCondition()) {            if (left.isMultCondition()) {                return left.annex(right, op);            } else {                return right.annex(left, op);            }        } else if (left.isMultCondition() && right.isMultCondition()) {            if (op.equals(left.op)) {                return left.annex(right, op);            } else if (op.equals(right.op)) {                return right.annex(left, op);            } else {                return new Condition<>(left, op, right);            }        }        return new Condition<>(left, op, right);    }    private Condition<T> annex(Condition<T> condition, String op) {        if (conditions == null) {            throw new RuntimeException("annex(Condition,op)函数中，叶级别无法吞并！");        }        if (op.equals(this.op)) {            if (condition.isMultCondition() && op.equals(condition.op)) {                if (this.level < condition.level) {                    this.level = condition.level + 1;                }                this.conditions.addAll(condition.conditions);            } else {                if (this.level <= condition.level) {                    this.level = condition.level + 1;                }                this.conditions.add(condition);            }            this.checkLevel();            return this;        } else {            return new Condition<>(this, op, condition);        }    }    private void checkLevel() {        if (this.level > 3) {            throw new RuntimeException("checkLevel() = " + level + ", 不能超过2！");        }    }    public String getOp() {        return op;    }    public void setOp(String op) {        this.op = op;    }    public String getColumn() {        return column;    }    public void setColumn(String column) {        this.column = column;    }    public Object getValue() {        return value;    }    public void setValue(Object value) {        this.value = value;    }    public List<Condition<T>> getConditions() {        return conditions;    }    public void setConditions(List<Condition<T>> conditions) {        this.conditions = conditions;    }}