/*  This class is generated by CodeMan */package ${packageName}.mapper.intent.tables;import ${packageName}.mapper.intent.api.WhereQuery;import ${packageName}.mapper.intent.impl.QueryWhere;import ${packageName}.mapper.intent.impl.TableField;import ${packageName}.mapper.intent.impl.TableImpl;import ${packageName}.mapper.intent.impl.WhereEmpty;import ${packageName}.model.db.${table.className};import java.util.LinkedHashMap;import java.util.Map;public class ${table.classNameUpper} extends TableImpl<${table.classNameUpper}.Setter> {    public final String name;    public ${table.classNameUpper}(String name) {        this.name = name;    }    public static class Setter extends ${table.classNameUpper} {        public final Map<String, Object> setmap = new LinkedHashMap<>();        public Setter(String name) {            super(name);        }        @Override        public Setter set(String column, Object value) {            setmap.put(column, value);            return this;        }        public SetterQuery where(WhereQuery<${table.className}> where) {            return new SetterQuery(setmap, where);        }    }    public static class SetterQuery extends QueryWhere<${table.className}> {        public final Map<String, Object> setmap;        public SetterQuery(Map<String, Object> setmap, WhereQuery<${table.className}> where) {            super(where);            this.setmap = setmap;        }    }    /**     * The reference instance of <code>${className}</code>     */    public static final ${table.classNameUpper} TABLE = new ${table.classNameUpper}("${table.nameSqlInStr}");<#list table.columns as column>    /**     * ${column.remark}<#if column == table.idColumn>【数据库主键】</#if>    <#list column.descriptions as description>     * ${description}    </#list>    <#if column.name!=column.fieldName>     * 数据库名称 ${column.name}    </#if>     */    public final TableField<${table.className}, ${column.fieldTypeObject}> ${column.fieldName?cap_first} = new TableField<>("${column.nameSqlInStr}");</#list>    public WhereQuery<${table.className}> where() {        return new WhereEmpty<>();    }    @Override    public Setter set(String column, Object value) {        return new Setter(name).set(column, value);    }<#list table.columns as column>    public Setter set${column.fieldName?cap_first}(${column.fieldTypeObject} ${column.fieldName}) {        return set(${column.fieldName?cap_first}.name, ${column.fieldName});    }</#list>}