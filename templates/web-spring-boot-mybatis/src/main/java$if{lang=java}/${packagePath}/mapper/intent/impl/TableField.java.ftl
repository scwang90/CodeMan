/*  This class is generated by CodeMan */package ${packageName}.mapper.intent.impl;import ${packageName}.mapper.intent.api.WhereQuery;import java.util.List;public class TableField<Table,Type> {    public String name;    public TableField(String name) {        this.name = name;    }    public QueryOrder<Table> asc() {        return new QueryOrder<>(name, false);    }    public QueryOrder<Table> desc() {        return new QueryOrder<>(name, true);    }    public WhereQuery<Table> eq(Type value) {        return equal(value);    }    public WhereQuery<Table> equal(Type value) {        return new QueryWhere<>(name, "=", value);    }    public WhereQuery<Table> ne(Type value) {        return notEqual(value);    }    public WhereQuery<Table> notEqual(Type value) {        return new QueryWhere<>(name, "<>", value);    }    public WhereQuery<Table> like(Type value) {        return new QueryWhere<>(name, "LIKE", value);    }    public WhereQuery<Table> contains(Type value) {        return new QueryWhere<>(name, "LIKE", "%" + value + "%");    }    public WhereQuery<Table> startsWith(Type value) {        return new QueryWhere<>(name, "LIKE", value + "%");    }    public WhereQuery<Table> endsWith(Type value) {        return new QueryWhere<>(name, "LIKE", "%" + value);    }    public WhereQuery<Table> notLike(Type value) {        return new QueryWhere<>(name, "NOT LIKE", value);    }    public WhereQuery<Table> notContains(Type value) {        return new QueryWhere<>(name, "NOT LIKE", "%" + value + "%");    }    public WhereQuery<Table> notStartsWith(Type value) {        return new QueryWhere<>(name, "NOT LIKE", value + "%");    }    public WhereQuery<Table> notEndsWith(Type value) {        return new QueryWhere<>(name, "NOT LIKE", "%" + value);    }    public WhereQuery<Table> lt(Type value) {        return lessThan(value);    }    public WhereQuery<Table> lessThan(Type value) {        return new QueryWhere<>(name, "<", value);    }    public WhereQuery<Table> le(Type value) {        return lessOrEqual(value);    }    public WhereQuery<Table> lessOrEqual(Type value) {        return new QueryWhere<>(name, "<=", value);    }    public WhereQuery<Table> gt(Type value) {        return greaterThan(value);    }    public WhereQuery<Table> greaterThan(Type value) {        return new QueryWhere<>(name, ">", value);    }    public WhereQuery<Table> ge(Type value) {        return greaterOrEqual(value);    }    public WhereQuery<Table> greaterOrEqual(Type value) {        return new QueryWhere<>(name, ">=", value);    }    public WhereQuery<Table> isNull() {        return new QueryWhere<>(name, "IS NULL", null);    }    public WhereQuery<Table> isNotNull() {        return new QueryWhere<>(name, "IS NOT NULL", null);    }    public WhereQuery<Table> in(List<Type> value) {        return new QueryWhere<>(name, "IN", value);    }    @SafeVarargs    public final WhereQuery<Table> in(Type... value) {        return new QueryWhere<>(name, "IN", List.of(value));    }}