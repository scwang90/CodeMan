package ${packageName}.mapper.intent.tablesimport ${packageName}.mapper.intent.api.WhereQueryimport ${packageName}.mapper.intent.impl.QueryWhereimport ${packageName}.mapper.intent.impl.TableFieldimport ${packageName}.mapper.intent.impl.WhereEmptyimport ${packageName}.model.db.${table.className}@Suppress("PropertyName", "MemberVisibilityCanBePrivate", "unused")open class ${table.classNameUpper}(val name: String) {    companion object {        val TABLE = ${table.classNameUpper}("${table.nameSqlInStr}")    }<#list table.columns as column>    /**     * ${column.remark}<#if column == table.idColumn>【数据库主键】</#if>    <#list column.descriptions as description>     * ${description}    </#list>    <#if column.name!=column.fieldName>     * 数据库名称 ${column.name}    </#if>     */    val ${column.fieldName?cap_first} = TableField<${table.className}, ${column.fieldTypeObject}>("${column.nameSqlInStr}")</#list>    fun where(): WhereQuery<${table.className}> {        return WhereEmpty()    }    open fun set(column: String, value: Any?): Setter {        return Setter().set(column, value)    }<#list table.columns as column>    /**     * ${column.remark}<#if column == table.idColumn>【数据库主键】</#if>    <#list column.descriptions as description>     * ${description}    </#list>    <#if column.name!=column.fieldName>     * 数据库名称 ${column.name}    </#if>     */    fun set${column.fieldName?cap_first}(${column.fieldName}: ${column.fieldType}<#if column.nullable>?</#if>):Setter {        return set(${column.fieldName?cap_first}.name, ${column.fieldName})    }</#list>    class Setter : ${table.classNameUpper}("${table.nameSqlInStr}"), ${packageName}.mapper.intent.api.Setter<Setter> {        private val _setters: MutableMap<String, Any?> = mutableMapOf()        override fun set(column: String, value: Any?): Setter {            _setters[column] = value            return this        }        fun where(where: WhereQuery<${table.className}>): SetterQuery {            return SetterQuery(_setters, where)        }    }    class SetterQuery(val setmap: Map<String, Any?>, where: WhereQuery<${table.className}>) : QueryWhere<${table.className}>(where)}