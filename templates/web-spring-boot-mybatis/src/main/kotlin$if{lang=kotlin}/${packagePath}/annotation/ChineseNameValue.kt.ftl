package ${packageName}.annotationimport ${packageName}.annotation.ChineseNameValue.ValueValidatorimport javax.validation.Constraintimport javax.validation.ConstraintValidatorimport javax.validation.ConstraintValidatorContextimport javax.validation.Payloadimport kotlin.reflect.KClass/** * 自定义枚举识别注解 - 中文姓名 * @author ${author} * @since ${now?string("yyyy-MM-dd zzzz")} */@MustBeDocumented@Retention(AnnotationRetention.RUNTIME)@Constraint(validatedBy = [ValueValidator::class])@Target(AnnotationTarget.FIELD, AnnotationTarget.CONSTRUCTOR, AnnotationTarget.VALUE_PARAMETER)annotation class ChineseNameValue( // 默认错误消息    val message: String = "无效的中文姓名", val required: Boolean = false,    val groups: Array<KClass<*>> = [], val payload: Array<KClass<out Payload>> = []) {    class ValueValidator : ConstraintValidator<ChineseNameValue, String?> {        private var required = false        //这个方法做一些初始化校验        override fun initialize(constraintAnnotation: ChineseNameValue) {            required = constraintAnnotation.required        }        override fun isValid(value: String?, constraintValidatorContext: ConstraintValidatorContext): Boolean {            return if (required && value == null) {                false            } else value?.matches(Regex("^[\\u4E00-\\u9FA5][\\u4E00-\\u9FA5|·]*[\\u4E00-\\u9FA5]$")) ?: true        }    }}